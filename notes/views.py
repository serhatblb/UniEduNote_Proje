from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.db.models import Q,F

from users.forms import CustomUserCreationForm
from .models import Note, Department, Semester, Course, University
from .forms import NoteUploadForm, NoteFilterForm
from django.http import JsonResponse, FileResponse # FileResponse'u ekle
import os #
from django.contrib import messages
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.html import strip_tags

def home_page(request):
    return render(request, 'notes/home.html')


# 1. YENÄ° VIEW: AJAX ile sadece sayacÄ± artÄ±rÄ±r
@login_required
def update_download_count(request, pk):
    if request.headers.get('x-requested-with') == 'XMLHttpRequest':
        note = get_object_or_404(Note, pk=pk)

        # SayacÄ± atomic olarak artÄ±r
        Note.objects.filter(pk=pk).update(download_count=F('download_count') + 1)

        # Yeni sayÄ±m deÄŸerini veritabanÄ±ndan Ã§ek
        note.refresh_from_db()

        # BaÅŸarÄ±lÄ± yanÄ±t gÃ¶nder
        return JsonResponse({
            'success': True,
            'new_count': note.download_count
        })
    # EÄŸer bu bir AJAX isteÄŸi deÄŸilse, hata ver veya redirect yap
    return JsonResponse({'success': False, 'error': 'Invalid request'}, status=400)


@login_required
def download_file_only(request, pk):
    note = get_object_or_404(Note, pk=pk)

    # ğŸš¨ Bu kÄ±smÄ± kaldÄ±rÄ±yoruz veya emin olmak iÃ§in kontrol ediyoruz!
    # if note.uploader != request.user:
    #     ...

    # Sadece dosya yolu kontrolÃ¼ ve indirme iÅŸlemi kalmalÄ±
    file_path = note.file.path

    if not os.path.exists(file_path):
        messages.error(request, "Ä°ndirilmeye Ã§alÄ±ÅŸÄ±lan dosya bulunamadÄ±.")
        return redirect('note_detail', pk=pk)

    try:
        response = FileResponse(
            open(file_path, 'rb'),
            as_attachment=True,
            filename=os.path.basename(file_path)
        )
        response['Content-Type'] = 'application/octet-stream'
        return response

    except FileNotFoundError:
        messages.error(request, "Dosya sunucuda bulunamadÄ±.")
        return redirect('note_detail', pk=pk)
    except Exception as e:
        messages.error(request, f"Dosya indirilirken beklenmedik bir hata oluÅŸtu: {e}")
        return redirect('note_detail', pk=pk)

@login_required
def dashboard_view(request):
    # Sadece giriÅŸ yapan kullanÄ±cÄ±nÄ±n yÃ¼klediÄŸi notlarÄ± Ã§ek
    notes_queryset = Note.objects.filter(uploader=request.user).select_related(
        'course__semester__department__university',
        'uploader'
    ).order_by('-upload_date')

    context = {
        'notes': notes_queryset,
        'note_count': notes_queryset.count(),
        'title': 'KiÅŸisel YÃ¶netim Paneli',
    }
    return render(request, 'notes/dashboard.html', context)


def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()

            # ğŸš¨ YENÄ° KOD: E-posta GÃ¶nderimi
            subject = 'UniEduNote HesabÄ±nÄ±z OluÅŸturuldu!'
            html_message = render_to_string('emails/registration_success.html', {'user': user})
            plain_message = strip_tags(html_message)
            from_email = 'no-reply@uniedunote.com'  # settings.py'deki DEFAULT_FROM_EMAIL ile aynÄ± olmalÄ±
            to = user.email

            try:
                send_mail(subject, plain_message, from_email, [to], html_message=html_message)
                messages.success(request, 'BaÅŸarÄ±yla kayÄ±t oldunuz ve e-posta onayÄ± gÃ¶nderildi.')
            except Exception as e:
                # E-posta gÃ¶nderme baÅŸarÄ±sÄ±z olursa bile kullanÄ±cÄ±yÄ± kaydetmeye devam et
                messages.error(request, 'KayÄ±t baÅŸarÄ±lÄ± ancak e-posta gÃ¶nderilemedi. Destekle iletiÅŸime geÃ§in.')
                print(f"E-posta gÃ¶nderme hatasÄ±: {e}")

            return redirect('login')
    else:
        form = CustomUserCreationForm()
    return render(request, 'registration/register.html', {'form': form})


# ğŸš¨ HatÄ±rlatma: Yeni bir template oluÅŸturman gerekecek: templates/emails/registration_success.html

@login_required
def delete_note(request, pk):
    note = get_object_or_404(Note, pk=pk)

    # GÃ¼venlik KontrolÃ¼: Sadece notu yÃ¼kleyen silebilir
    if note.uploader != request.user:
        messages.error(request, "Bu notu silme yetkiniz yok.")
        return redirect('note_detail', pk=pk)

    if request.method == 'POST':
        # DosyayÄ± sunucudan sil (isteÄŸe baÄŸlÄ± ama Ã¶nerilir)
        note.file.delete(save=False)

        # VeritabanÄ± kaydÄ±nÄ± sil
        note.delete()

        messages.success(request, f"'{note.title}' baÅŸlÄ±klÄ± notunuz baÅŸarÄ±yla silindi.")
        return redirect('dashboard')  # Not silindikten sonra dashboard'a yÃ¶nlendir

    # GET metodu ile gelinirse bir onay sayfasÄ± gÃ¶sterebiliriz
    # Ancak basit tutmak iÃ§in, direkt POST metoduyla silme yapacaÄŸÄ±z.
    # Yine de onay iÃ§in bir template kullanmak daha iyi bir kullanÄ±cÄ± deneyimi saÄŸlar.
    context = {
        'note': note,
        'title': f"{note.title} Silme OnayÄ±"
    }
    return render(request, 'notes/note_confirm_delete.html', context)


@login_required
def edit_note(request, pk):
    note = get_object_or_404(Note, pk=pk)

    # GÃ¼venlik KontrolÃ¼: Sadece notu yÃ¼kleyen dÃ¼zenleyebilir
    if note.uploader != request.user:
        messages.error(request, "Bu notu dÃ¼zenleme yetkiniz yok.")
        return redirect('note_detail', pk=pk)

    # Var olan notu form Ã¶rneÄŸi olarak geÃ§iriyoruz (instance=note)
    # request.FILES'Ä± sadece dosya deÄŸiÅŸirse iÅŸlemek iÃ§in ekliyoruz
    form = NoteUploadForm(request.POST or None, request.FILES or None, instance=note)

    # Dosya filtresi alanlarÄ±nÄ±n doÄŸru varsayÄ±lan deÄŸerleri gÃ¶stermesi iÃ§in
    # Formu manuel olarak gÃ¼ncelliyoruz.
    if request.method == 'GET' or 'university' not in request.POST:
        # Notun baÄŸlÄ± olduÄŸu Ãœniversite, BÃ¶lÃ¼m ve DÃ¶nem'i al
        current_semester = note.course.semester
        current_department = current_semester.department
        current_university = current_department.university

        # Form alanlarÄ±nÄ± o anki deÄŸerlerle doldur
        form.fields['university'].initial = current_university.pk
        form.fields['department'].queryset = Department.objects.filter(university=current_university).order_by('name')
        form.fields['department'].initial = current_department.pk
        form.fields['semester'].queryset = Semester.objects.filter(department=current_department).order_by('name')
        form.fields['semester'].initial = current_semester.pk
        form.fields['course'].queryset = Course.objects.filter(semester=current_semester).order_by('code')

    # --- AJAX'lÄ± filtreleme mantÄ±ÄŸÄ± (POST veya AJAX ile dinamik yÃ¼klemeler) ---
    # Bu kÄ±sÄ±m, upload_note view'indeki ile aynÄ±dÄ±r ve form gÃ¶nderildiÄŸinde
    # veya AJAX ile yeni bir seÃ§im yapÄ±ldÄ±ÄŸÄ±nda Ã§alÄ±ÅŸÄ±r.
    if 'university' in request.POST:
        try:
            # AynÄ± zamanda formun veri doÄŸruluÄŸunu da kontrol ederiz.
            university_id = int(request.POST.get('university'))
            form.fields['department'].queryset = Department.objects.filter(university_id=university_id).order_by('name')
        except (ValueError, TypeError):
            pass

    if 'department' in request.POST:
        try:
            department_id = int(request.POST.get('department'))
            form.fields['semester'].queryset = Semester.objects.filter(department_id=department_id).order_by('name')
        except (ValueError, TypeError):
            pass

    if 'semester' in request.POST:
        try:
            semester_id = int(request.POST.get('semester'))
            form.fields['course'].queryset = Course.objects.filter(semester_id=semester_id).order_by('code')
        except (ValueError, TypeError):
            pass
    # --- AJAX/Filtreleme MantÄ±ÄŸÄ± BitiÅŸi ---

    if form.is_valid():
        # Formu kaydet (bu, var olan 'note' nesnesini gÃ¼nceller)
        form.save()
        messages.success(request, f"'{note.title}' baÅŸlÄ±klÄ± notunuz baÅŸarÄ±yla gÃ¼ncellendi.")
        return redirect('note_detail', pk=note.pk)

    context = {
        'form': form,
        'is_editing': True,  # Template'e dÃ¼zenleme modunda olduÄŸumuzu bildirir
        'note': note,
        'title': f"{note.title} DÃ¼zenleniyor"
    }
    return render(request, 'notes/upload_note.html', context)
@login_required
def dashboard_view(request):
    return render(request, 'notes/dashboard.html')


@login_required
def upload_note(request):
    form = NoteUploadForm(request.POST or None, request.FILES or None)

    # AJAX'tan gelen Ã¼niversite/bÃ¶lÃ¼m seÃ§imlerini iÅŸleyerek diÄŸer dropdown'larÄ± doldur
    if 'university' in request.POST:
        try:
            university_id = int(request.POST.get('university'))
            form.fields['department'].queryset = Department.objects.filter(university_id=university_id).order_by('name')
        except (ValueError, TypeError):
            pass

    if 'department' in request.POST:
        try:
            department_id = int(request.POST.get('department'))
            form.fields['semester'].queryset = Semester.objects.filter(department_id=department_id).order_by('name')
        except (ValueError, TypeError):
            pass

    if 'semester' in request.POST:
        try:
            semester_id = int(request.POST.get('semester'))
            form.fields['course'].queryset = Course.objects.filter(semester_id=semester_id).order_by('code')
        except (ValueError, TypeError):
            pass

            # Form kaydedilirse
    if form.is_valid():
        note = form.save(commit=False)
        note.uploader = request.user
        note.save()
        return redirect('dashboard')  # BaÅŸarÄ±lÄ± yÃ¼klemeden sonra dashboard'a yÃ¶nlendir

    context = {'form': form}
    return render(request, 'notes/upload_note.html', context)


# --- NOT LÄ°STELEME VE FÄ°LTRELEME GÃ–RÃœNÃœMÃœ ---
@login_required
def note_list_view(request):
    form = NoteFilterForm(request.GET)
    notes_queryset = Note.objects.all().select_related(
        'course__semester__department__university',
        'uploader'
    ).order_by('-upload_date')

    # 2. AJAX ile Filtreleme Formu alanlarÄ±nÄ± doldur
    if 'university' in request.GET:
        try:
            uni_id = int(request.GET.get('university'))
            form.fields['department'].queryset = Department.objects.filter(university_id=uni_id).order_by('name')
        except (ValueError, TypeError):
            pass

    if 'department' in request.GET:
        try:
            dept_id = int(request.GET.get('department'))
            form.fields['semester'].queryset = Semester.objects.filter(department_id=dept_id).order_by('name')
        except (ValueError, TypeError):
            pass

            # 3. QuerySet'i Filtrele
    filters = {}
    if request.GET.get('university'):
        filters['course__semester__department__university__id'] = request.GET.get('university')

    if request.GET.get('department'):
        filters['course__semester__department__id'] = request.GET.get('department')

    if request.GET.get('semester'):
        filters['course__semester__id'] = request.GET.get('semester')

    search_query = request.GET.get('q')
    if search_query:
        notes_queryset = notes_queryset.filter(
            Q(title__icontains=search_query) |
            Q(description__icontains=search_query) |
            Q(course__code__icontains=search_query)
        )

    if filters:
        notes_queryset = notes_queryset.filter(**filters)

    context = {
        'notes': notes_queryset,
        'note_count': notes_queryset.count(),
        'title': 'TÃ¼m NotlarÄ± KeÅŸfet',
        'filter_form': form,
        'current_search_query': search_query or ''
    }
    return render(request, 'notes/note_list.html', context)


# --- NOT DETAY GÃ–RÃœNÃœMÃœ ---
@login_required
def note_detail_view(request, pk):
    note = get_object_or_404(
        Note.objects.select_related('course__semester__department__university', 'uploader'),
        pk=pk
    )
    context = {
        'note': note,
        'title': note.title
    }
    return render(request, 'notes/note_detail.html', context)


# --- AJAX FONKSÄ°YONLARI ---
def load_departments(request):
    university_id = request.GET.get('university_id')
    departments = Department.objects.filter(university_id=university_id).order_by('name')
    department_list = [{'id': department.id, 'name': department.name} for department in departments]
    return JsonResponse(department_list, safe=False)


def load_semesters(request):
    department_id = request.GET.get('department_id')
    semesters = Semester.objects.filter(department_id=department_id).order_by('name')
    semester_list = [{'id': semester.id, 'name': semester.name} for semester in semesters]
    return JsonResponse(semester_list, safe=False)


def load_courses(request):
    semester_id = request.GET.get('semester_id')
    courses = Course.objects.filter(semester_id=semester_id).order_by('code')
    course_list = [{'id': course.id, 'name': f"{course.code} - {course.name}"} for course in courses]
    return JsonResponse(course_list, safe=False)